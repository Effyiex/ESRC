
#$ Atomic<String[]> PROGRAM_ARGS = new Atomic().seal()

#$ function sleep(float seconds):
  long ms = (long) (seconds * 1000.0F)
  try:
    Thread.sleep(ms)
  error:
    return

#$ int random(int min, int max):
  return (int) (System.nanoTime() % (max - min + 1))

#$ int RANDOM_FLOAT_RANGE = 10000

#$ float random():
  return random(0, RANDOM_FLOAT_RANGE) / (float) RANDOM_FLOAT_RANGE

#$ int[] range(int total):
  int[] output = new int[total]
  for int i = 0; i < total; i++:
    output[i] = i
  return output

#$ int[] shift(int total):
  int[] output = new int[total]
  for int i = 0; i < total; i++:
    output[i] = total - i - 1
  return output

global # function main(String... args):
  PROGRAM_ARGS.set(args)
  try:
    ESRCCore.EXECUTED_PATH.set(%ESRC_INSTANCE%.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath().substring(1))
    Thread vmActivityCheck = new Thread(ESRCCore.VM_ACTIVITY_CHECK)
    vmActivityCheck.setDaemon(true)
    vmActivityCheck.start()
  error:
    e.printStackTrace()
  new %ESRC_INSTANCE%()
  sleep(0.5F)

# ConsoleHandler console = new ConsoleHandler.AwaitingConsoleHandler()
